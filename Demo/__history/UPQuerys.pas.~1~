unit UPQuerys;

interface

uses
FireDAC.Stan.Intf,stdctrls,
FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Phys.IBBase,
FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Param,System.SysUtils,
FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet,
System.Classes;

type
  TFDQuery = class(FireDAC.Comp.Client.TFDQuery)
  private
      procedure SetSQL(const AValue: TStrings);
      function GetSQL: TStrings;
  public
      property SQL: TStrings read GetSQL write SetSQL;
      procedure ExecSQL; overload;
  published

end;

implementation

uses
  UDataModule;


{ TFDQuery }

procedure TFDQuery.ExecSQL;
VAR
Transac:TFDTransaction;
begin
     try
         if not DesativaTransacao then
         begin
             Transac := TFDTransaction.Create(nil);
             Transac.Connection := Connection;
             Connection.Transaction := Transac;
             Transac.StartTransaction;
         end;
         try
             Execute;

             if not DesativaTransacao then
             Transac.Commit;
         except on e:Exception do
         begin
             if not DesativaTransacao then
             Transac.Rollback;

             raise Exception.Create(e.Message);
         end;
         end;
     finally
         if not DesativaTransacao then
         Transac.Free;
     end;
end;

function TFDQuery.GetSQL: TStrings;
VAR
Transac:TFDTransaction;
begin
     try
         if not DesativaTransacao then
         begin
               Transac := TFDTransaction.Create(nil);
               Transac.Connection     := Connection;
               Connection.Transaction := Transac;
               Transac.StartTransaction;
         end;
         try
             Result := Command.CommandText;

             if not DesativaTransacao then
             Transac.Commit;
         except on e:Exception do
         begin
             if not DesativaTransacao then
             Transac.Rollback;

             raise Exception.Create(e.Message);
         end;
         end;
     finally
         if not DesativaTransacao then
         Transac.Free;
     end;
end;

procedure TFDQuery.SetSQL(const AValue: TStrings);
VAR
Transac:TFDTransaction;
begin
     try
         if not DesativaTransacao then
         begin
             Transac := TFDTransaction.Create(nil);
             Transac.Connection := Connection;
             Connection.Transaction := Transac;
             Transac.StartTransaction;
         end;
         try
             Command.CommandText := AValue;

             if not DesativaTransacao then
             Transac.Commit;
         except on e:Exception do
         begin
             if not DesativaTransacao then
             Transac.Rollback;

             raise Exception.Create(e.Message);
         end;
         end;
     finally
         if not DesativaTransacao then
         Transac.Free;
     end;
end;

end.
